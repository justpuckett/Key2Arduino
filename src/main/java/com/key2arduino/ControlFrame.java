/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.key2arduino;

import com.fazecast.jSerialComm.SerialPort;
import java.awt.Color;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.ConsoleHandler;
import java.util.logging.Formatter;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import javax.sound.midi.MidiChannel;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.MidiUnavailableException;
import javax.sound.midi.Synthesizer;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.NativeInputEvent;
import org.jnativehook.dispatcher.SwingDispatchService;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;

public class ControlFrame extends javax.swing.JFrame implements NativeKeyListener, WindowListener {

    private static final Logger logger = Logger.getLogger(GlobalScreen.class.getPackage().getName());
    private JTextField[] keys = new JTextField[4];
    private JSpinner[] relays = new JSpinner[4];
    private JSpinner[] durations = new JSpinner[4];
    SerialPort arduinoPort = null;
    Timer timer = new Timer();

    /**
     * Creates new form ShockerFrame
     */
    public ControlFrame() {
        initComponents();
        keys[0] = this.txtKey0;
        keys[1] = this.txtKey1;
        keys[2] = this.txtKey2;
        keys[3] = this.txtKey3;
        relays[0] = spnPort0;
        relays[1] = spnPort1;
        relays[2] = spnPort2;
        relays[3] = spnPort3;
        durations[0] = spnDuration0;
        durations[1] = spnDuration1;
        durations[2] = spnDuration2;
        durations[3] = spnDuration3;
        spnPort0.setValue(7);
        spnPort1.setValue(6);
        spnPort2.setValue(5);
        spnPort3.setValue(4);
        spnDuration0.setValue(10);
        spnDuration1.setValue(10);
        spnDuration2.setValue(10);
        spnDuration3.setValue(10);
        toggleGui(chkBindRelays.isSelected());
        txtColorStatus.setBackground(Color.RED);

        // Disable parent logger and set the desired level.
        logger.setUseParentHandlers(false);
        logger.setLevel(Level.OFF);

        // Add our custom formatter to a console handler.
        ConsoleHandler handler = new ConsoleHandler();
        handler.setFormatter(new LogFormatter());
        handler.setLevel(Level.OFF);
        logger.addHandler(handler);
        GlobalScreen.setEventDispatcher(new SwingDispatchService());
        toggleKeyListener();
        connectArduino();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        btnConnect = new javax.swing.JButton();
        txtColorStatus = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        spnDuration0 = new javax.swing.JSpinner();
        spnDuration1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        spnDuration2 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        spnDuration3 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spnPort0 = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        spnPort1 = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        spnPort2 = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        spnPort3 = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        chkListen = new javax.swing.JCheckBox();
        chkEcho = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        txtKey0 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtKey1 = new javax.swing.JTextField();
        txtKey2 = new javax.swing.JTextField();
        txtKey3 = new javax.swing.JTextField();
        chkMusic = new javax.swing.JCheckBox();
        txtPort = new javax.swing.JTextField();
        chkBindRelays = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hermit Shocker 5000 v.1.0");

        txtLog.setColumns(20);
        txtLog.setLineWrap(true);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        btnConnect.setBackground(new java.awt.Color(153, 255, 153));
        btnConnect.setText("Connect to Arduino");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        txtColorStatus.setEditable(false);
        txtColorStatus.setBackground(new java.awt.Color(255, 51, 51));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        jLabel1.setText("Duration");

        spnDuration0.setModel(new javax.swing.SpinnerNumberModel(1, 1, 60, 1));

        spnDuration1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 60, 1));

        jLabel2.setText("Duration");

        spnDuration2.setModel(new javax.swing.SpinnerNumberModel(1, 1, 60, 1));

        jLabel3.setText("Duration");

        spnDuration3.setModel(new javax.swing.SpinnerNumberModel(1, 1, 60, 1));

        jLabel4.setText("Duration");

        jLabel5.setText("Port");

        spnPort0.setModel(new javax.swing.SpinnerNumberModel(1, 0, 13, 1));

        jLabel6.setText("Port");

        spnPort1.setModel(new javax.swing.SpinnerNumberModel(2, 0, 13, 1));

        jLabel7.setText("Port");

        spnPort2.setModel(new javax.swing.SpinnerNumberModel(3, 0, 13, 1));

        jLabel8.setText("Port");

        spnPort3.setModel(new javax.swing.SpinnerNumberModel(4, 0, 13, 1));

        jLabel9.setText("Relay #1");

        jLabel10.setText("Relay #2");

        jLabel11.setText("Relay #3");

        jLabel12.setText("Relay #4");

        jButton1.setText("Test");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnPort0, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnPort1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnPort2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnPort3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnDuration0, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnDuration1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnDuration2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnDuration3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jButton1))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(spnDuration0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(spnDuration1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(spnDuration2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(spnDuration3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(spnPort0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(spnPort1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(spnPort2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(spnPort3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        btnClear.setText("Clear Log");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        chkListen.setSelected(true);
        chkListen.setText("Listen to Keyboard");
        chkListen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkListenActionPerformed(evt);
            }
        });

        chkEcho.setText("Echo Keyboard");
        chkEcho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEchoActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Key Binding"));

        txtKey0.setEditable(false);
        txtKey0.setText("P");
        txtKey0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtKey0FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKey0FocusLost(evt);
            }
        });
        txtKey0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtKey0MouseClicked(evt);
            }
        });

        jLabel15.setText("Relay #2");

        jLabel16.setText("Relay #3");

        jLabel17.setText("Relay #4");

        jLabel14.setText("Relay #1");

        txtKey1.setEditable(false);
        txtKey1.setText("P");
        txtKey1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtKey1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKey1FocusLost(evt);
            }
        });
        txtKey1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtKey1MouseClicked(evt);
            }
        });

        txtKey2.setEditable(false);
        txtKey2.setText("P");
        txtKey2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtKey2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKey2FocusLost(evt);
            }
        });
        txtKey2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtKey2MouseClicked(evt);
            }
        });

        txtKey3.setEditable(false);
        txtKey3.setText("P");
        txtKey3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtKey3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKey3FocusLost(evt);
            }
        });
        txtKey3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtKey3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtKey3)
                    .addComponent(txtKey2)
                    .addComponent(txtKey1)
                    .addComponent(txtKey0, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKey0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtKey1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtKey2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtKey3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        chkMusic.setSelected(true);
        chkMusic.setText("Music");

        txtPort.setEditable(false);

        chkBindRelays.setSelected(true);
        chkBindRelays.setText("Bind Relays");
        chkBindRelays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBindRelaysActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(txtColorStatus)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkListen))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkMusic)
                        .addGap(34, 34, 34)
                        .addComponent(chkEcho)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkBindRelays)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(txtColorStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(chkListen)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear)
                    .addComponent(chkEcho)
                    .addComponent(chkMusic)
                    .addComponent(chkBindRelays))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        connectArduino();
    }//GEN-LAST:event_btnConnectActionPerformed

    private void connectArduino() {
        txtLog.append("Searching for Arduino...\n");
        arduinoPort = ArduinoWriter.findArduinoPort();
        if (arduinoPort != null) {
            txtColorStatus.setBackground(Color.GREEN.brighter());
            txtPort.setText(arduinoPort.getSystemPortName());
            txtLog.append("Arduino responded on port: " + arduinoPort.getSystemPortName() + "\n");
        } else {
            txtColorStatus.setBackground(Color.RED.darker());
            txtLog.append("Arduino not found. Please connect pre-programmed Arduino and try again.\n");
        }
    }

    private void chkListenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkListenActionPerformed
        toggleKeyListener();
    }//GEN-LAST:event_chkListenActionPerformed

    private void chkEchoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEchoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkEchoActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtLog.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void chkBindRelaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBindRelaysActionPerformed
        toggleGui(chkBindRelays.isSelected());
    }//GEN-LAST:event_chkBindRelaysActionPerformed

    int clicks = 0;

    private void txtKey0MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtKey0MouseClicked
        if (clicks > 0) {
            this.requestFocus();
            clicks = 0;
        } else {
            clicks++;
        }
    }//GEN-LAST:event_txtKey0MouseClicked

    private void txtKey1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtKey1MouseClicked
        if (clicks > 0) {
            this.requestFocus();
            clicks = 0;
        } else {
            clicks++;
        }
    }//GEN-LAST:event_txtKey1MouseClicked

    private void txtKey2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtKey2MouseClicked
        if (clicks > 0) {
            this.requestFocus();
            clicks = 0;
        } else {
            clicks++;
        }
    }//GEN-LAST:event_txtKey2MouseClicked

    private void txtKey3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtKey3MouseClicked
        if (clicks > 0) {
            this.requestFocus();
            clicks = 0;
        } else {
            clicks++;
        }
    }//GEN-LAST:event_txtKey3MouseClicked

    private void txtKey0FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKey0FocusLost
        clicks = 0;
        txtLog.setText("Key set.");
    }//GEN-LAST:event_txtKey0FocusLost

    private void txtKey1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKey1FocusLost
        clicks = 0;
        txtLog.setText("Key set.");
    }//GEN-LAST:event_txtKey1FocusLost

    private void txtKey2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKey2FocusLost
        clicks = 0;
        txtLog.setText("Key set.");
    }//GEN-LAST:event_txtKey2FocusLost

    private void txtKey3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKey3FocusLost
        clicks = 0;
        txtLog.setText("Key set.");
    }//GEN-LAST:event_txtKey3FocusLost

    private void txtKey0FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKey0FocusGained
        clicks = 0;
        txtLog.setText("Setting key, click field to stop.");
    }//GEN-LAST:event_txtKey0FocusGained

    private void txtKey1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKey1FocusGained
        clicks = 0;
        txtLog.setText("Setting key, click field to stop.");
    }//GEN-LAST:event_txtKey1FocusGained

    private void txtKey2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKey2FocusGained
        clicks = 0;
        txtLog.setText("Setting key, click field to stop.");
    }//GEN-LAST:event_txtKey2FocusGained

    private void txtKey3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKey3FocusGained
        clicks = 0;
        txtLog.setText("Setting key, click field to stop.");
    }//GEN-LAST:event_txtKey3FocusGained

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void toggleGui(boolean selected) {
        txtKey1.setEnabled(!selected);
        txtKey2.setEnabled(!selected);
        txtKey3.setEnabled(!selected);
        spnDuration1.setEnabled(!selected);
        spnDuration2.setEnabled(!selected);
        spnDuration3.setEnabled(!selected);
    }

    private void askForKey(int relayNum) {

        txtLog.setText("Enter");
    }

    private void toggleKeyListener() {
        if (chkListen.isSelected()) {
            GlobalScreen.addNativeKeyListener(this);
        } else {
            GlobalScreen.removeNativeKeyListener(this);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ControlFrame frame = new ControlFrame();
                frame.setVisible(true);
                frame.addWindowListener(frame);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnConnect;
    private javax.swing.JCheckBox chkBindRelays;
    private javax.swing.JCheckBox chkEcho;
    private javax.swing.JCheckBox chkListen;
    private javax.swing.JCheckBox chkMusic;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spnDuration0;
    private javax.swing.JSpinner spnDuration1;
    private javax.swing.JSpinner spnDuration2;
    private javax.swing.JSpinner spnDuration3;
    private javax.swing.JSpinner spnPort0;
    private javax.swing.JSpinner spnPort1;
    private javax.swing.JSpinner spnPort2;
    private javax.swing.JSpinner spnPort3;
    private javax.swing.JTextField txtColorStatus;
    private javax.swing.JTextField txtKey0;
    private javax.swing.JTextField txtKey1;
    private javax.swing.JTextField txtKey2;
    private javax.swing.JTextField txtKey3;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

    @Override
    public void nativeKeyTyped(NativeKeyEvent nativeEvent) {
    }

    @Override
    public void nativeKeyPressed(NativeKeyEvent nativeEvent) {
        processKeystroke(nativeEvent);
    }

    @Override
    public void nativeKeyReleased(NativeKeyEvent nativeEvent) {

    }

    /**
     * Write information about the <code>NativeInputEvent</code> to the text
     * window.
     *
     * @param e the native input event to display.
     */
    private void processKeystroke(final NativeInputEvent e) {
        //System.out.println(e.getClass());
        if (e instanceof NativeKeyEvent) {
            NativeKeyEvent nke = (NativeKeyEvent) e;
            for (int i = 0; i < keys.length; i++) {
                JTextField keyField = keys[i];
                if (keyField.hasFocus()) {
                    keyField.setText(buildKeyText(nke));
                    return;
                }
            }
            boolean anyMatch = false;
            if (chkEcho.isSelected()) {
                txtLog.append(buildKeyText(nke) + "\n");
            }
            ArrayList<Integer> matchedRelays = new ArrayList<>();
            for (int i = 0; i < keys.length; i++) {
                JTextField keyField = keys[i];
                String matchKey = keyField.getText();
                String keyPressed = buildKeyText(nke);
                if (matchKey != null && !matchKey.isEmpty() && matchKey.equals(keyPressed)) {
                    anyMatch = true;
                    matchedRelays.add(i);
                    if (!chkBindRelays.isSelected()) {
                        txtLog.append("Match! " + keyPressed + "\n");
                    } else if (i == 0) {
                        txtLog.append("Match! " + keys[0].getText() + "\n");
                    }
                }
            }
            if (!matchedRelays.isEmpty()) {
                runAllRelays(matchedRelays);
            }

            if (anyMatch && chkMusic.isSelected()) {
                playMidi(new int[]{80, 50, 78, 50}, true);
                //Toolkit.getDefaultToolkit().beep();
            }
            //System.out.println("id: " + id + "\t time: " + time + "\t modifiers: " + modifiers + "\t modifers_text: " + textModifiers + "\t Key: " + keyChar + "\t KeyText: " + keyText);
        }

        try {
            //Clean up the history to reduce memory consumption.
            if (txtLog.getLineCount() > 100) {
                txtLog.replaceRange("", 0, txtLog.getLineEndOffset(txtLog.getLineCount() - 1 - 100));
            }

            txtLog.setCaretPosition(txtLog.getLineStartOffset(txtLog.getLineCount() - 1));
        } catch (BadLocationException ex) {
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
    }

    private void runAllRelays(ArrayList<Integer> matches) {
        if (matches == null || matches.isEmpty()) {
            return;
        }
        final boolean bindAll = this.chkBindRelays.isSelected();
        {
            String[] out = new String[matches.size()];
            for (int i = 0; i < matches.size(); i++) {
                int index = matches.get(i);
                int relayNum = (Integer) relays[index].getValue();
                out[i] = "<t" + relayNum + ">";
            }
            if (bindAll) {
                txtLog.append("Turning on all relays..." );
            } else {
                txtLog.append("Turning on some relays..." );
            }
            ArduinoWriter.writeToPort(arduinoPort, out);
        }
        if (bindAll) {
            int duration = (Integer) durations[0].getValue();
            TimerTask tt = new TimerTask() {
                @Override
                public void run() {
                    txtLog.append("Turning off all relays..." );
                    String[] out = new String[matches.size()];
                    for (int i = 0; i < matches.size(); i++) {
                        int index = matches.get(i);
                        int relayNum = (Integer) relays[index].getValue();
                        out[i] = "<f" + relayNum + ">";
                    }
                    ArduinoWriter.writeToPort(arduinoPort, out);
                }
            };
            timer.schedule(tt, duration * 1000);
        } else {
            for (int i = 0; i < matches.size(); i++) {
                int index = matches.get(i);
                int duration = (Integer) durations[index].getValue();
                System.out.println(index +" : Duration: " + duration);
                TimerTask tt = new TimerTask() {
                    @Override
                    public void run() {
                        txtLog.append("Turning off relay " + index + "...\n" );
                        String[] out = new String[1];
                        int relayNum = (Integer) relays[index].getValue();
                        out[0] = "<f" + relayNum + ">";
                        ArduinoWriter.writeToPort(arduinoPort, out);
                    }
                };
                timer.schedule(tt, duration * 1000);
            }
        }
    }

    private String buildKeyText(NativeKeyEvent nke) {
//       nke.paramString();
//        String modifiers = Integer.toBinaryString(nke.getModifiers());
//
//        char keyChar = nke.getKeyChar();
//        String matchKey = txtKey1.getText();
//        int rawModifiers = nke.getModifiers();
        String keyText = NativeKeyEvent.getKeyText(nke.getKeyCode());
        String textModifiers = NativeKeyEvent.getModifiersText(nke.getModifiers());
        if (textModifiers != null) {
            textModifiers = textModifiers.trim();
        }
        String key;
        if (textModifiers == null || textModifiers.isEmpty()) {
            key = keyText;
        } else {
            if (keyText != null && keyText.equals(textModifiers)) {
                key = keyText;
            } else {
                key = textModifiers + "+" + keyText;
            }

        }

        return key;
    }

    @Override
    public void windowOpened(WindowEvent e) {
        try {
            // Initialize native hook.  This is done on window open because the
            // listener requires the txtEventInfo object to be constructed.
            GlobalScreen.registerNativeHook();
        } catch (NativeHookException ex) {
            Logger.getLogger(ControlFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.requestFocusInWindow();
        if (false) {
            txtLog.append("JNativeHook Version " + System.getProperty("jnativehook.lib.version"));
            txtLog.append("\nAuto Repeat Rate: " + System.getProperty("jnativehook.key.repeat.rate"));
            txtLog.append("\n" + "Auto Repeat Delay: " + System.getProperty("jnativehook.key.repeat.delay"));
            txtLog.append("\n" + "Double Click Time: " + System.getProperty("jnativehook.button.multiclick.iterval"));
            txtLog.append("\n" + "Pointer Sensitivity: " + System.getProperty("jnativehook.pointer.sensitivity"));
            txtLog.append("\n" + "Pointer Acceleration Multiplier: " + System.getProperty("jnativehook.pointer.acceleration.multiplier"));
            txtLog.append("\n" + "Pointer Acceleration Threshold: " + System.getProperty("jnativehook.pointer.acceleration.threshold"));
        }
    }

    @Override
    public void windowClosing(WindowEvent e) {

    }

    @Override
    public void windowClosed(WindowEvent e) {
        try {
            GlobalScreen.unregisterNativeHook();
        } catch (NativeHookException ex) {
            //ex.printStackTrace();
        }
    }

    @Override
    public void windowIconified(WindowEvent e) {

    }

    @Override
    public void windowDeiconified(WindowEvent e) {

    }

    @Override
    public void windowActivated(WindowEvent e) {

    }

    @Override
    public void windowDeactivated(WindowEvent e) {

    }

    /**
     * A simple log formatter.
     *
     * @see java.util.Formatter
     */
    private final class LogFormatter extends Formatter {

        @Override
        public String format(LogRecord record) {
            StringBuilder line = new StringBuilder();

            line.append(new Date(record.getMillis()))
                    .append(" ")
                    .append(record.getLevel().getLocalizedName())
                    .append(":\t")
                    .append(formatMessage(record));

            if (record.getThrown() != null) {
                try {
                    StringWriter sw = new StringWriter();
                    PrintWriter pw = new PrintWriter(sw);
                    record.getThrown().printStackTrace(pw);
                    pw.close();
                    line.append(sw.toString());
                    sw.close();
                } catch (Exception ex) {
                    /* Do Nothing */ }
            }

            return line.toString();
        }
    }

    public static void playMidi(int[] notes, boolean interleavedDuration) {
        int defaultDur = 300;
        int volume = 100;
        int interDuration = 80;
        if (notes == null || notes.length == 0) {
            return;
        }
        Thread th = new Thread() {

            @Override
            public void run() {
                int offset = 0;
                if (interleavedDuration) {
                    offset = 1;
                }
                Synthesizer ms = null;
                try {
                    ms = MidiSystem.getSynthesizer();
                    ms.open();
                    MidiChannel[] mc = ms.getChannels();
                   // mc[0].allNotesOff();
//                    try {
//                        Thread.sleep(500);
//                    } catch (InterruptedException ex) {
//                    }

                    for (int i = 0; i < notes.length; i = i + offset + 1) {
                        mc[0].noteOn(notes[i], volume);
                        int dur = defaultDur;
                        if (interleavedDuration && notes.length > (i + 1)) {
                            dur = notes[i + 1];
                        }
                        try {
                            Thread.sleep(dur);
                        } catch (InterruptedException ex) {
                        }
                        mc[0].noteOff(notes[i]);
                        if (interDuration > 0) {
                            try {
                                Thread.sleep(interDuration);
                            } catch (InterruptedException ex) {
                            }
                        }
                    }
                    try {
                        Thread.sleep(1500);
                    } catch (InterruptedException ex) {
                    }
                    ms.close();
                } catch (MidiUnavailableException ex) {
                } finally {
                    if (ms != null && ms.isOpen()) {
                        ms.close();
                    }
                }
            }
        };
        th.start();
    }
}
